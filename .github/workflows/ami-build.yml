name: Packer Build and Deployment

on:
  push:
    branches:
      - main

jobs:
  integration-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set Database Environment Variable
        run: echo "DATABASE_URL=postgresql+asyncpg://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@localhost:5432/${{ secrets.POSTGRES_DB }}" >> $GITHUB_ENV
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Run Integration Tests
        run: pytest tests/
        env:
          DATABASE_URL: ${{ env.DATABASE_URL }}
          SECRET_KEY: ${{secrets.TEST_EMAIL_SECRET_KEY}} 
          BASE_URL: "demo.atharvawaranashiwar.me"
          AWS_REGION: ${{secrets.AWS_REGION}}
          SNS_TOPIC_ARN: ${{secrets.SNS_TOPIC_ARN}}
          TOKEN_MAX_AGE: 180

      - name: Clean up
        if: always()
        run: echo "Test run complete"

  packer-build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - name: Set up HashiCorp Packer
        uses: hashicorp/setup-packer@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Packer Build Custom AMI
        run: |
          packer init packer/webapp.pkr.hcl
          packer build -var "aws_profile=${{ secrets.AWS_PROFILE }}" \
                       -var 'ami_users=["${{ secrets.AMI_USERS }}"]' \
                       packer/webapp.pkr.hcl

      - name: Share AMI with DEMO account
        run: |
          echo "Fetching AMI ID..."
          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=webapp-ami*" --query 'Images[0].ImageId' --output text)
          
          echo "Sharing the AMI with DEMO account..."
          aws ec2 modify-image-attribute --image-id $AMI_ID --launch-permission "Add=[{UserId=${{ secrets.DEMO_ACCOUNT_ID }}}]"

          echo "Fetching snapshot ID..."
          SNAPSHOT_ID=$(aws ec2 describe-images --image-ids $AMI_ID --query 'Images[0].BlockDeviceMappings[0].Ebs.SnapshotId' --output text)

          echo "Sharing the snapshot with DEMO account..."
          aws ec2 modify-snapshot-attribute --snapshot-id $SNAPSHOT_ID --attribute createVolumePermission --operation-type add --user-ids ${{ secrets.DEMO_ACCOUNT_ID }}

        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}

      # New Tasks
      # New Tasks for Demo Account
      - name: Configure AWS Credentials for Demo Account
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.DEMO_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEMO_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Create New Launch Template Version
        id: create-launch-template
        run: |
          echo "Fetching AMI ID..."
          AMI_ID=$(aws ec2 describe-images --owners self --filters "Name=name,Values=webapp-ami*" --query 'Images[0].ImageId' --output text)

          echo "Creating new launch template version..."
          LAUNCH_TEMPLATE_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-id ${{ secrets.LAUNCH_TEMPLATE_ID }} \
            --source-version 1 \
            --launch-template-data '{"ImageId":"'"$AMI_ID"'"}' \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)

          echo "New launch template version created: $LAUNCH_TEMPLATE_VERSION"
          echo "LAUNCH_TEMPLATE_VERSION=$LAUNCH_TEMPLATE_VERSION" >> $GITHUB_ENV

      - name: Update Auto Scaling Group
        run: |
          echo "Updating Auto Scaling Group..."
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP_NAME }} \
            --launch-template "LaunchTemplateId=${{ secrets.LAUNCH_TEMPLATE_ID }},Version=$LAUNCH_TEMPLATE_VERSION"

      - name: Start Instance Refresh
        id: instance-refresh
        run: |
          echo "Starting instance refresh..."
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP_NAME }} \
            --query 'InstanceRefreshId' \
            --output text)

          echo "Instance refresh started: $REFRESH_ID"
          echo "REFRESH_ID=$REFRESH_ID" >> $GITHUB_ENV

      - name: Wait for Instance Refresh to Complete
        run: |
          echo "Waiting for instance refresh to complete..."
          while true; do
            REFRESH_STATUS=$(aws autoscaling describe-instance-refreshes \
              --auto-scaling-group-name ${{ secrets.AUTOSCALING_GROUP_NAME }} \
              --query 'InstanceRefreshes[?InstanceRefreshId==`'"$REFRESH_ID"'`].Status' \
              --output text)

            echo "Current refresh status: $REFRESH_STATUS"

            if [[ "$REFRESH_STATUS" == "Successful" ]]; then
              echo "Instance refresh completed successfully!"
              break
            elif [[ "$REFRESH_STATUS" == "Failed" ]]; then
              echo "Instance refresh failed!"
              exit 1
            fi
            sleep 30
          done
